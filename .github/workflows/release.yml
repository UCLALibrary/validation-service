name: Build and Publish Release

env:
  GO_VERSION: '1.25.3'
  GO_LINTER_VERSION: 'v2.5.0'
  DOCKER_REGISTRY_ACCOUNT: ${{ vars.DOCKER_REGISTRY_ACCOUNT }}

on:
  release:
    types: [ published, released ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    # Set up a two build strategy, one with Kakadu and one without
    strategy:
      matrix:
        kakadu: ['Include Kakadu', 'Exclude Kakadu']
      fail-fast: false

    env:
      KAKADU_VERSION: ${{ matrix.kakadu == 'Include Kakadu' && secrets.KAKADU_VERSION || '' }}

    steps:
      - name: Extract service name from repo name
        run: echo "SERVICE_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

        # Set up the Go environment
      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "${{ env.GO_VERSION }}"

      - name: Install Go linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
            sh -s -- -b $(go env GOPATH)/bin ${{ env.GO_LINTER_VERSION }}

      - name: Install yq # v4.45.1
        run: |
          go install github.com/mikefarah/yq/v4@8bf425b4d1344db7cd469a8d10a390876e0c77fd

      - name: Install oapi-codegen # v2.4.1
        run: |
          go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@9c09ef9e9d4be639bd3feff31ff2c06961421272

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Optionally, login to Docker repository
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        if: env.DOCKER_USERNAME != null
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Import Kakadu SSH key on GitHub
        if: env.ACT != 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.KAKADU_SSH_KEY }}" > ~/.ssh/kakadu_github_key

        # On ACT, we encode the SSH key using Base64 so it can be passed on the command line
      - name: Import Kakadu SSH key while running in ACT
        if: env.ACT == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_B64 }}" | base64 -d > ~/.ssh/kakadu_github_key

      - name: Configure Kakadu SSH key
        run: |
          chmod 600 ~/.ssh/kakadu_github_key
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/kakadu_github_key
          echo "Host github.com
            IdentityFile ~/.ssh/kakadu_github_key
            IdentitiesOnly yes
            StrictHostKeyChecking accept-new" >> ~/.ssh/config

      # Build and test the application (also lints)
      - name: Build project
        run: make all docker-push
        env:
          VERSION: ${{ github.event.release.tag_name }}

  # If a test deploy is desired, releases should first be run as pre-releases
  trigger-test-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.release.prerelease == true }}
    needs: release
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.head_ref }} # This should be our tag branch because we're detached with a tagged commit

      - name: Update test image version
        id: helm-values-update
        uses: mikefarah/yq@0ecdce24e83f0fa127940334be98c86b07b0c488 # v4.48.1
        with:
          cmd: |
            yq '.image.tag = "${{ github.event.release.tag_name }}"' 'pkg/helm/test-validator.yaml' |
            yq e 'with(.image.tag; .style = "double")' > test-validator-new.yaml

      - name: Commit test version update
        run: |
          cat test-validator-new.yaml
          git fetch
          git switch test-validator
          mv test-validator-new.yaml test-validator.yaml
          git config --global user.email "softwaredev-services@library.ucla.edu"
          git config --global user.name "ServicesBot"
          git add test-validator.yaml
          git commit --no-verify --allow-empty -m "Automated update of test Docker image tag"
          git push

  # If release is run without the pre-release checkbox checked, it's the production release
  trigger-prod-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.release.prerelease == false }}
    needs: release
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.head_ref }} # This should be our tag branch because we're detached with a tagged commit

      - name: Update prod image version
        id: helm-values-update
        uses: mikefarah/yq@0ecdce24e83f0fa127940334be98c86b07b0c488 # v4.48.1
        with:
          cmd: |
            yq '.image.tag = "${{ github.event.release.tag_name }}"' 'pkg/helm/prod-validator.yaml' |
            yq e 'with(.image.tag; .style = "double")' > prod-validator-new.yaml

      - name: Commit prod version update
        run: |
          cat prod-validator-new.yaml
          git fetch
          git switch prod-validator
          mv prod-validator-new.yaml prod-validator.yaml
          git config --global user.email "softwaredev-services@library.ucla.edu"
          git config --global user.name "ServicesBot"
          git add prod-validator.yaml
          git commit --no-verify --allow-empty -m "Automated update of prod Docker image tag"
          git push
