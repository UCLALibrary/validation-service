name: Build and Publish Release

env:
  GO_VERSION: '1.24.0'
  GO_LINTER_VERSION: 'v1.64.6'
  DOCKER_REGISTRY_ACCOUNT: ${{ vars.DOCKER_REGISTRY_ACCOUNT }}

on:
  release:
    types: [ published ]
  workflow_dispatch:
    
jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract service name from repo name
        run: echo "SERVICE_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

        # Set up the Go environment
      - name: Setup Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "${{ env.GO_VERSION }}"

      - name: Install Go linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
            sh -s -- -b $(go env GOPATH)/bin ${{ env.GO_LINTER_VERSION }}

      - name: Install yq
        run: |
          go install github.com/mikefarah/yq/v4@8bf425b4d1344db7cd469a8d10a390876e0c77fd # v4.45.1

      - name: Install oapi-codegen
        run: |
          go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@9c09ef9e9d4be639bd3feff31ff2c06961421272
          # v2.4.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Optionally, login to Docker repository
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        if: env.DOCKER_USERNAME != null
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

        # Build and test the application (also lints)
      - name: Build project
        run: make all

      - name: Build and push Docker image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY_ACCOUNT }}/${{ env.SERVICE_NAME }}:${{ github.event.release.tag_name }}
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            LOG_LEVEL=info
            VERSION=${{ github.event.release.tag_name }}

  # If a test deploy is desired, releases should first be run as pre-releases
  trigger-test-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.release.prerelease == true }}
    needs: release
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.head_ref }} # This should be our tag branch because we're detached with a tagged commit

      - name: Update test image version
        id: helm-values-update
        uses: mikefarah/yq@8bf425b4d1344db7cd469a8d10a390876e0c77fd # v4.45.1
        with:
          cmd: |
            yq '.image.tag = "${{ github.event.release.tag_name }}"' 'pkg/helm/test-validator.yaml' |
            yq e 'with(.image.tag; .style = "double")' > test-validator-new.yaml

      - name: Commit test version update
        run: |
          cat test-validator-new.yaml
          git fetch
          git switch test-validator
          mv test-validator-new.yaml test-validator.yaml
          git config --global user.email "softwaredev-services@library.ucla.edu"
          git config --global user.name "ServicesBot"
          git add test-validator.yaml
          git commit --no-verify -m "Automated update of test Docker image tag"
          git push

  # If release is run without the pre-release checkbox checked, it's the production release
  trigger-prod-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.release.prerelease == false }}
    needs: release
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.head_ref }} # This should be our tag branch because we're detached with a tagged commit

      - name: Update prod image version
        id: helm-values-update
        uses: mikefarah/yq@8bf425b4d1344db7cd469a8d10a390876e0c77fd # v4.45.1
        with:
          cmd: |
            yq '.image.tag = "${{ github.event.release.tag_name }}"' 'pkg/helm/prod-validator.yaml' |
            yq e 'with(.image.tag; .style = "double")' > prod-validator-new.yaml

      - name: Commit prod version update
        run: |
          cat prod-validator-new.yaml
          git fetch
          git switch prod-validator
          mv prod-validator-new.yaml prod-validator.yaml
          git config --global user.email "softwaredev-services@library.ucla.edu"
          git config --global user.name "ServicesBot"
          git add prod-validator.yaml
          git commit --no-verify -m "Automated update of prod Docker image tag"
          git push
