// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Status A JSON document representing the service's runtime status. It's intentionally brief, for now.
type Status struct {
	Fester     string `json:"fester"`
	FileSystem string `json:"filesystem"`
	Service    string `json:"service"`
}

// StatusCreated A JSON document representing the service's runtime status. It's intentionally brief, for now.
type StatusCreated = Status

// StatusOK A JSON document representing the service's runtime status. It's intentionally brief, for now.
type StatusOK = Status

// UploadCSVMultipartBody defines parameters for UploadCSV.
type UploadCSVMultipartBody struct {
	// CsvFile The CSV file to be uploaded
	CsvFile openapi_types.File `json:"csvFile"`

	// Profile The name of the profile the validation process should use
	Profile string `json:"profile"`
}

// UploadCSVMultipartRequestBody defines body for UploadCSV for multipart/form-data ContentType.
type UploadCSVMultipartRequestBody UploadCSVMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the validation service's current status
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Uploads and validates CSV files
	// (POST /upload/csv)
	UploadCSV(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// UploadCSV converts echo context to params.
func (w *ServerInterfaceWrapper) UploadCSV(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadCSV(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/upload/csv", wrapper.UploadCSV)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yV32/jRBDH/5XRgtQXX5yD8pK3o+JQQdwhcvQFeNh4x/Fe7V0zM5s0qvK/o1nbSdME",
	"WiHEm3/sznznO5/ZfTRV7PoYMAibxaMh5D4GxvxyGwQp2HaJtEH6jiiSfq5iEAyij4IPUvat9UHfuGqw",
	"s/qED7brWzQL86lBYLGSGAj/TMgCtfUtOlhhZRMjiK5ovTQ7kLhBBucdrHeEpjCy6zUIC/mwNvv9vjAO",
	"uSLfi49hCE8IW8tgA/hRL3AWDJgV7wvzIcr7mIL79yWM2tEBIcdEFcLVT7tfxucrqGJqHYQosEKoNdcr",
	"1V+KrOVoKLtqESQeQ+4Ls8xe3hBaQfesFNv3ra+sBi8/c3xW0JeEtVmYL8pjx8vhL5dD1EsS38GEBPjg",
	"cvSwzj27ILyxDCvEANWo7yD444//r1ZprAChJAoMFn5YfvwAcfUZK4Gtl2ZC0oc6UpdVGI035lAJY5rF",
	"41mSHMzFKnUYNElPyBgOvih8vsIrBkpBfDfxP4NbueIMadBYtm13sCKPdQF1JAhxOzOF6Sn2SOKHEazV",
	"YTrlMd6fs1WY2rfIOxbsXlxdmIc36/gm2E4/vvctLoeN6sCg/uWM+8IoAZ4Uw98O+4pJ8omiPw7bhyYM",
	"3VP3Lxm8sa13uSmTmUM/qware4ab5R3k2JAYHfgAMRE4v/ZiW9hGuq/buGU1U7zkAu6OEZdjxHc/35rC",
	"bJB4SDufzWdv1YHYY7C9Nwvz9Ww+u9aWWGlyN0o+QLFGOZf+qfEMGFwfffhH/J5wB3YVkwzkDFDG+ilH",
	"WoYSkRffOrMw36OMcBan5/VX8/nfDc9hXXmYx31hvnnNhku3QJ6V1HWWdoMgzpLPG3fFUCUiHRSe5rYw",
	"ZerbaF1Z8Ubz95FfNJPFkqiXAbdP8/QUK2RF4TB/SY8WdPpLMQEbXGZmSPp7ODP01/zjZnlnBqaR5dvo",
	"ds9OrC614ntLUmrv3jgr9vTQOp3cijc6WZfqwgPC4+k+KEO9MwYuzMKsfFB3L0z6WNflyDrUE0GTAc9a",
	"M1nGTb60EuOL0z0Vc0x+eaKPe4QS7s/4fPtaPm+OF8j1/PrlXac3/H+H9oAGZ4ZGC/HJCaRV7/8KAAD/",
	"/y+FZAlECQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
