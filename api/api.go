// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Report A JSON document encapsulating the results of a validation check.
type Report struct {
	Profile  *string `json:"profile,omitempty"`
	Time     *string `json:"time,omitempty"`
	Warnings *[]struct {
		Column  *int    `json:"column,omitempty"`
		Header  *string `json:"header,omitempty"`
		Message *string `json:"message,omitempty"`
		Row     *int    `json:"row,omitempty"`
		Value   *string `json:"value,omitempty"`
	} `json:"warnings,omitempty"`
}

// Status A JSON document representing the service's runtime status. It's intentionally brief, for now.
type Status struct {
	Fester     string `json:"fester"`
	FileSystem string `json:"filesystem"`
	Service    string `json:"service"`
}

// StatusCreated A JSON document encapsulating the results of a validation check.
type StatusCreated = Report

// StatusOK A JSON document representing the service's runtime status. It's intentionally brief, for now.
type StatusOK = Status

// UploadCSVMultipartBody defines parameters for UploadCSV.
type UploadCSVMultipartBody struct {
	// CsvFile The CSV file to be uploaded
	CsvFile openapi_types.File `json:"csvFile"`

	// Profile The name of the profile the validation process should use
	Profile string `json:"profile"`
}

// UploadCSVMultipartRequestBody defines body for UploadCSV for multipart/form-data ContentType.
type UploadCSVMultipartRequestBody UploadCSVMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the validation service's current status
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Uploads and validates CSV files
	// (POST /upload/csv)
	UploadCSV(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// UploadCSV converts echo context to params.
func (w *ServerInterfaceWrapper) UploadCSV(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadCSV(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/upload/csv", wrapper.UploadCSV)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xW247bNhD9lQFbYF+0tvbWInpLF0mwvSRFnOal7QMtjSwmFKnMDO04gT+m39IfK0jJ",
	"l7XVOijypgt55szMmUN+VqVvO+/QCavisyLkzjvG9PLgBMlpO0NaIj0j8hQ/l94JOomPgh9l2lltXHzj",
	"ssFWxyf8qNvOoirUmwaBRUtgIPwQkAVqbSxWMMdSB0aQuMIaadYgfokMlalgsSZUmZJ1F0FYyLiF2mw2",
	"maqQSzKdGO96eEJYaQbtwAx8gRNhwMR4k6mXXp774Kr/n8LAHSsgZB+oRLj4Zf16eL6A0gdbgfMCc4Q6",
	"xvpC9mPIMZ0IpecWQfwecpOpWarlPaEWrI5S0V1nTakj+PQd+6OEviWsVaG+me47Pu3/8vQ1dp5kjOJT",
	"2EoCjKsSuluknh0Sj7uh0QxzRAflwG5H99VPX41pD3iGqTRagFACOQYNP85evQQ/f4elwMpIsxWkcbWn",
	"NrFQEW+IESkMBSk+nwRJYJUvQ4tOAF2pOw72sCwcrDD4GjQstTVVCgBlg+X7icpUR75DEtPPWEe+NlFm",
	"h4qrsNbByqmEMiWmPVp8nV/fXeY3l1f5m6urIv+uuMkn+fd3V9dPbq6fXOa3RZ6PAa00OeMWiYQRbLds",
	"DriV3obWPYp2t0OKw7bANF4N6grpaGiMWByL2yKzXhzlkAazgLLRpEtBgtoTPHv1c697MA5KtHYMjvzq",
	"PMGltuEo4j0ZFuM0vPDu099/Wfz0hxsZ2d2XXj5q/0ET6fX4ikGjZ8VD2BEyup12om+ZEi8YKLjY6UGp",
	"E3iQC07+5iKWtnYNczJYZ6lSzq9OlVXH4Tzqin8/VsMoQF6zYHt2daY+Xi78pdNRheq5sTjrN8bx6dmf",
	"jxjbhh+Coehgv+/2ZVvKjxj9eVLguD+O7liBDwZugO3NIE0fw/3sLSRsCIxJVz4QVGZhRFtYeXpfW7/i",
	"WExJAi7U2z3ibEB8+uuDytQSifuw+SSfXMUK+A6d7owq1M0kn9zGlmhpUjemvBPFAkeM5U1jGNBVnTfu",
	"P73rwLRAz32QXjm9o/n6UEcxjaiItPihUoV6gTKIM3t81F/n+b85727ddGfmm0zdfcmGsQtEMtrQtprW",
	"PSFOlE8bd8FQBqI4KLw1/UxNQ2e9rqYlL5NheT5bTBZNEmvpcHUYpyNfIkcp7OYvxHMJKxhcGbSrkmb6",
	"oMkhHhf0t/TjfvZW9ZpGlh98tT467tpgxXSaZBp7d1lp0Y9PvCPf5eXz4Uw4vS9sJTxcDHpmGK8bvS5U",
	"oebGxeqOTPrBaXOKHId6q6BtAY5asy0ZN+m+ExjPTvc2mX3w8Yne7xEKuDnR59WX6vN+f/u4zW/P73p8",
	"Ofx60u6lwUlDQwnxwIFi1pt/AgAA//8k6Ir/fwsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
