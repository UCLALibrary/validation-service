// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Status A JSON document representing the service's runtime status. It's intentionally brief, for now.
type Status struct {
	FS      string `json:"fs"`
	S3      string `json:"s3"`
	Service string `json:"service"`
}

// JobIDParam defines model for JobIDParam.
type JobIDParam = string

// StatusCreated A JSON document representing the service's runtime status. It's intentionally brief, for now.
type StatusCreated = Status

// StatusOK A JSON document representing the service's runtime status. It's intentionally brief, for now.
type StatusOK = Status

// UploadCSVMultipartBody defines parameters for UploadCSV.
type UploadCSVMultipartBody struct {
	// CsvFile The CSV file to be uploaded
	CsvFile openapi_types.File `json:"csvFile"`

	// Profile The name of the profile the validation process should use
	Profile string `json:"profile"`
}

// UploadCSVMultipartRequestBody defines body for UploadCSV for multipart/form-data ContentType.
type UploadCSVMultipartRequestBody UploadCSVMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the validation service's current status
	// (GET /status)
	GetStatus(ctx echo.Context) error

	// (GET /status/{jobID})
	GetJobStatus(ctx echo.Context, jobID JobIDParam) error
	// Start a new validation process
	// (POST /upload/csv)
	UploadCSV(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// GetJobStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jobID" -------------
	var jobID JobIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "jobID", ctx.Param("jobID"), &jobID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jobID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetJobStatus(ctx, jobID)
	return err
}

// UploadCSV converts echo context to params.
func (w *ServerInterfaceWrapper) UploadCSV(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadCSV(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.GET(baseURL+"/status/:jobID", wrapper.GetJobStatus)
	router.POST(baseURL+"/upload/csv", wrapper.UploadCSV)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWTW/jRgz9K8S0QC6K5e2mF9/SbFM4RXcXdZrLdg8jDW1NIs2oQ8qOEfi/Fxx9+CNK",
	"E3SBvdnSzOPj4yOpJ5X7qvYOHZOaPalaB10hY4j/bnw2//BZHsk/g5QHW7P1Ts3UpYP5B1j6AFwgrHVp",
	"jZZXcO8zlSgrZ2rNhUqU0xWqmboXNJWogP80NqBRMw4NJoryAistEXhby0HiYN1K7XY7OUy1d4SRz9wx",
	"BqfLBYY1hl9D8EEe594xOo4I+MhpXWoJ/3SAjI+6qksBvy0QiDU3BEIEiWGpbYkGMsx1QxjzodJysQX2",
	"ayQw1sBqG1AlYwyPZbktMCBsNIF2YDu+QJEwYGS8S9RHz9e+ceb/p9BxRwMByTchRzj7Y/tn9/sMct+U",
	"BpxnyBCWEuuN7MeQJR2B0lmJwH4PuUvUImp5FVCzlPQoFV3Xpc2jLdJ78icJ/RhwqWbqh3RvwbR9S2mL",
	"OkbxEnpLgHUmortVrNkI8UITZIgO8o7fQPjT79+XKxeaISA3wRFouFl8+gg+u8ecYWO56C1p3dKHKrJQ",
	"gtfFEApdmOeN2IIZnzcVOglSByR0gy5iPpvjGUFoHNuq9/8E5nxG0aROsHRZbiELFpdJ7GvnNxOVqDr4",
	"GgPbtgWXdOxF//DMV4l6PF/5867rrxciOr1/9Zqcapm+fnR3OEW+DPdinEQ4fh2utCK31RF1xwQ8mF4d",
	"VFuvvMD8geBqcQdLWyJBQ2jAOvBNAGNXlnUJGx8elmWrFVuOnO/2gIsO8PLzXCVqjYHaqNPJdPJOkvY1",
	"Ol1bNVPvJ9PJhSiuuYgypzTUfIX8nPltYQnQmdpb95/uOrAV6Mw33Bqj9ZxfHtpE0pCCx8Nzo2bqN+TO",
	"eyfj+Kfp9KXeGM6lQ7vtEvXzWy6MDfnYCk1V6bBtCdHp1tmbPG9CkD6gvi2TXsf0Ka6g3Yt63lncnIyS",
	"e5+dUY81osyNzwZxDpfnl/E090fSg+W6+/qtyl5ML16/cLx1vq0eUdamLr02aU7r+O3g6VWPEuvAYlGH",
	"m8Py1cHnSNJgw9RqZCCjkVfSfKCdiZ3YBv3bPavGX/HF1eKu+8ZA4l+82Z7M+aop2dY6cCotcW406+NR",
	"fzzvclpf2xLH8sJhMHQ7sWWGsmnbdlMzlVknph0Zdl1e48gyPPvG7AU4cXwvGRVx1TeEr87JPpl98PE5",
	"efyFtntmzndvNefVfu1+d4ceToyF2O5F10U7/xsAAP//oXcG8woLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
